anchors:
  - &latest-xcode "13.2.0"
  - &latest-ios   "15.2"
  - &min-ios      "14.5"
  - &MobileSyncExplorerReactNative
      https://github.com/forcedotcom/SalesforceMobileSDK-Templates/MobileSyncExplorerReactNative\#dev
  - &MobileSyncSwiftTemplate
      https://github.com/forcedotcom/SalesforceMobileSDK-Templates/MobileSyncExplorerSwift\#dev

executors:
  android:
    working_directory: ~/SalesforceMobileSDK-UITests
    docker:
      - image: circleci/android:api-30-node
    environment:
      TERM: "dumb"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError"'
      FASTLANE_SKIP_UPDATE_CHECK: "true"
  mac:
    working_directory: ~/SalesforceMobileSDK-UITests
    macos:
      xcode: *latest-xcode
    shell: /bin/bash --login -eo pipefail
    environment:
      FASTLANE_SKIP_UPDATE_CHECK: "true"
    
version: 2.1
jobs:
  test-android:
    executor: << parameters.e >>
    parameters:
      app_type: 
        type: string
        default: "native"
      template:
        type: boolean
        default: false
      sfdx:
        type: boolean
        default: false
      adv_auth:
        type: boolean
        default: false
      complex_hybrid:
        type: boolean
        default: false
      e:
        type: executor
        default: "android"
    steps:
      - checkout
      - run: 
          name: Setup
          command: ./install.sh
          when: always
      - run: 
          name: Authorize gcloud and set config defaults
          command:  |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project mobile-apps-firebase-test
      - run:
          name: Install SFDX
          command: |
            sudo chown -R `whoami` /usr/local/
            npm install -g sfdx-cli
            sudo chown -R `whoami` $HOME/.config/
      - when:
          condition: << parameters.template >>
          steps:
            - run:
                name: Test Android Template
                command: cd .circleci && fastlane android template:<< parameters.app_type >> sfdx:<< parameters.sfdx >>
                when: always
      - unless:
          condition: << parameters.template >>
          steps:
            - when:
                condition: << parameters.complex_hybrid >>
                steps:
                  - run:
                      name: Test Android Complex Hybrid - Account Editor
                      command: cd .circleci && fastlane android type:hybrid_local complexHybrid:accounteditor sfdx:<< parameters.sfdx >>
                      when: always
                  - run:
                      name: Test Android Complex Hybrid - Mobile Sync Explorer
                      command: cd .circleci && fastlane android type:hybrid_local complexHybrid:mobilesyncexplorer sfdx:<< parameters.sfdx >>
                      when: always
            - unless: 
                condition: << parameters.complex_hybrid >>
                steps:
                  - run:
                      name: Test << parameters.app_type >> Android
                      command: cd .circleci && fastlane android type:<< parameters.app_type >> sfdx:<< parameters.sfdx >> adv_auth:<< parameters.adv_auth >>
                      when: always
      - run: 
          name: Copy test results data
          command: |
            mkdir -p firebase/results
            gsutil -m cp -r gs://test-lab-w87i9sz6q175u-kwp8ium6js0zw/UITest-<< parameters.app_type >>-${CIRCLE_BUILD_NUM} ./firebase/ || true

            count=0
            for result in $(find ./firebase/ -name 'test_result*'); do
              mv $result "./firebase/results/result${count}.xml" && (( count++ )) || true 
            done
          when: always
      - store_artifacts:
          path: firebase
      - store_test_results:
          path: firebase/results
      - store_artifacts:
          path: test_output

  test-ios:
    executor: << parameters.e >>
    parameters:
      e:
        type: executor
        default: "mac"
      ios_version: 
        type: string
      app_type: 
        type: string
        default: "native"
      template:
        type: boolean
        default: false
      adv_auth:
        type: boolean
        default: false
      complex_hybrid:
        type: boolean
        default: false
      sfdx:
        type: boolean
        default: false
    steps:
      - checkout
      - run: 
          name: Setup
          command: ./install.sh
          when: always
      - run:
          name: Install SFDX
          command: npm install -g sfdx-cli
      - when:
          condition: << parameters.template >>
          steps:
            - run:
                name: Test iOS << parameters.ios_version >> Template
                command: |
                  sudo chown -R $USER:$GROUP ~/.npm
                  sudo chown -R $USER:$GROUP ~/.config
                  cd .circleci
                  fastlane ios template:<< parameters.app_type >> ios:<< parameters.ios_version >> sfdx:<< parameters.sfdx >>
                when: always
                no_output_timeout: 20m
      - unless:
          condition: << parameters.template >>
          steps:
            - when:
                condition: << parameters.complex_hybrid >>
                steps:
                  - run:
                      name: Test iOS << parameters.ios_version >> Complex Hybrid - Account Editor
                      command:  |
                          sudo chown -R $USER:$GROUP ~/.npm
                          sudo chown -R $USER:$GROUP ~/.config
                          sudo chown -R `whoami` /Users/`whoami`/Library/Preferences/
                          cd .circleci && fastlane ios type:hybrid_local ios:<< parameters.ios_version >> complexHybrid:accounteditor sfdx:<< parameters.sfdx >>
                      when: always
                  - run:
                      name: Test iOS << parameters.ios_version >> Complex Hybrid - Mobile Sync Explorer
                      command:  |
                          sudo chown -R $USER:$GROUP ~/.npm
                          sudo chown -R $USER:$GROUP ~/.config
                          sudo chown -R `whoami` /Users/`whoami`/Library/Preferences/
                          cd .circleci && fastlane ios type:hybrid_local ios:<< parameters.ios_version >> complexHybrid:mobilesyncexplorer sfdx:<< parameters.sfdx >>
                      when: always
            - unless: 
                condition: << parameters.complex_hybrid >>
                steps:
                  - run:
                      name: Test << parameters.app_type >> iOS << parameters.ios_version >>
                      command:  |
                          sudo chown -R $USER:$GROUP ~/.npm
                          sudo chown -R $USER:$GROUP ~/.config
                          sudo chown -R `whoami` /Users/`whoami`/Library/Preferences/
                          cd .circleci && fastlane ios type:<< parameters.app_type >> ios:<< parameters.ios_version >> sfdx:<< parameters.sfdx >> adv_auth:<< parameters.adv_auth >>
                      when: always
                      no_output_timeout: 20m
      - store_artifacts:
          path: test_output

  test-carthage:
    executor: << parameters.e >>
    parameters:
      ios_version: 
          type: string
      sfdx:
        type: boolean
        default: false
      e:
        type: executor
        default: "mac"
    steps:
      - checkout
      - run: 
          name: Setup
          command: ./install.sh
          when: always
      - run:
          name: Install Carthage
          command: brew upgrade carthage
      - run:
          name: Test Carthage
          command: cd .circleci && fastlane test_carthage ios:"<< parameters.ios_version >>"
          when: always
      - store_artifacts:
          path: test_output
      - store_test_results:
          path: test_output

workflows:
  pr:
    jobs:
      - test-android:
          name: Android << matrix.app_type >>
          matrix:
            parameters: 
              app_type: ["native", "native_kotlin", "hybrid_local", "hybrid_remote", "react_native"]
      - test-ios:
          name: iOS << matrix.ios_version >> << matrix.app_type >> 
          matrix:
            parameters: 
              app_type: ["native", "native_swift", "hybrid_local", "hybrid_remote", "react_native"]
              ios_version: [*min-ios, *latest-ios]
              
  # Cron are on a timezone 8 hours ahead of PST
  # Build everything on Saturday Afternoon
  build-all-apps:
    triggers:
      - schedule:
          cron: "30 19 * * 6"
          filters:
            branches:
              only:
                - master
    jobs:
      - test-android:
          name: Android << matrix.app_type >> SFDX-<< matrix.sfdx >>
          matrix:
            parameters: 
              app_type: ["native", "native_kotlin", "hybrid_local", "hybrid_remote", "react_native"]
              sfdx: [true, false]
      - test-android:
          name: Android MobileSyncExplorerReactNative SFDX-<< matrix.sfdx >>
          matrix:
            parameters: 
              app_type: [*MobileSyncExplorerReactNative]
              template: [true]
              sfdx: [true, false]
      - test-android:
          name: Android Advanced Auth
          adv_auth: true
      - test-android:
          name: Android Complex Hybrid
          complex_hybrid: true
      - test-ios:
          name: iOS << matrix.ios_version >> << matrix.app_type >> SFDX-<< matrix.sfdx >>
          matrix:
            parameters: 
              app_type: ["native", "native_swift", "hybrid_local", "hybrid_remote", "react_native"]
              ios_version: [*min-ios, *latest-ios]
              sfdx: [true, false]
      - test-ios:
          name: iOS << matrix.ios_version >> MobileSyncExplorerReactNative SFDX-<< matrix.sfdx >>
          matrix: 
            parameters: 
              app_type: [*MobileSyncExplorerReactNative]
              ios_version: [*min-ios]
              template: [true]
              sfdx: [true, false]
      - test-ios:
          name: iOS << matrix.ios_version >> Template
          matrix: 
            parameters: 
              app_type: [*MobileSyncExplorerReactNative, *MobileSyncSwiftTemplate]
              ios_version: [*latest-ios]
              template: [true]
      - test-ios:
          name: iOS << matrix.ios_version >> Advanced Auth
          matrix:
            parameters:  
              adv_auth: [true]
              ios_version: [*min-ios, *latest-ios]
      - test-ios:
          name: iOS << matrix.ios_version >> Complex Hybrid
          matrix:
            parameters:  
              complex_hybrid: [true]
              ios_version: [*min-ios, *latest-ios]
      - test-carthage:
          name: iOS << matrix.ios_version >> Carthage
          matrix:
            parameters: 
              ios_version: [*min-ios, *latest-ios]